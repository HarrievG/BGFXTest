# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

strategy:
  matrix:
  #  linux:
 #     imageName: 'ubuntu-16.04'
  #  mac:
   #   imageName: 'macos-10.13'
    windows:
      imageName: 'windows-latest'

variables:
  RUNVCPKG_VCPKG_TRIPLET: true
  system.debug: true
  vcpkgGitCommitId: 30124253eecff36bc90f73341edbfb4f845e2a1e
  vcpkgPackages: 'sdl2'
  #: manifests
  
pool:
  vmImage: $(imageName)

steps:
- task: Cache@2
  inputs:
    # As 'key' use the content of the response file, vcpkg's submodule fetched commit id and the platform name.
    # The key must be one liner, each segment separated by pipe char, non-path segments enclosed by
    # double quotes.
    key: "vcpkg | $(Agent.OS) | bincache"
    #key: $(Build.SourcesDirectory)/CMakeLists.txt | "$(Build.SourcesDirectory)/.git/modules/vcpkg/HEAD" | "$(Agent.OS)"
    #path: '$(Build.SourcesDirectory)/vcpkg'
    path: 'C:\Users\VssAdministrator\AppData\Local\vcpkg\archives\'
  displayName: 'cache vcpkg bin cache'

- task: Cache@2
  inputs:
    # As 'key' use the content of the response file, vcpkg's submodule fetched commit id and the platform name.
    # The key must be one liner, each segment separated by pipe char, non-path segments enclosed by
    # double quotes.
    key: "vcpkg | $(Agent.OS) | installcache"
    path: '$(Build.SourcesDirectory)/vcpkg'
  displayName: 'cache vcpkg installs'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      git clone https://github.com/microsoft/vcpkg
      .\vcpkg\bootstrap-vcpkg.bat
      .\vcpkg\vcpkg install --triplet=x64-Windows
      .\vcpkg\vcpkg integrate install
#      mkdir build
#      cd build
#      cmake -s ..\
- task: run-cmake@0
  inputs:
    cmakeListsOrSettingsJson: 'CMakeSettingsJson'
    useVcpkgToolchainFile: true
    configurationRegexFilter: 'x64*'

# - task: Cache@2
#   inputs:
#     # As 'key' use the content of the response file, vcpkg's submodule fetched commit id and the platform name.
#     # The key must be one liner, each segment separated by pipe char, non-path segments enclosed by
#     # double quotes.
#     key: $(Build.SourcesDirectory)/vcpkg_x64-windows.txt | "$(Build.SourcesDirectory)/.git/modules/vcpkg/HEAD" | "$(Agent.OS)"
#     path: '$(Build.SourcesDirectory)/vcpkg'
#   displayName: 'cache'
# - task: run-vcpkg@0
#   displayName: 'Run vcpkg'
#   inputs:
#     vcpkgGitCommitId: $(vcpkgGitCommitId)
#     # Response file stored in source control, it provides the list of ports and triplet(s).
#     vcpkgArguments: '$(vcpkgPackages)'
#     # Location of the vcpkg as submodule of the repository.
#     vcpkgDirectory: $(Build.SourcesDirectory)/vcpkg
# - task: PowerShell@2
#   inputs:
#     targetType: 'inline'
#     script: 'env:VCPKG_FEATURE_FLAGS' 
    
# - task: run-cmake@0
#   displayName: 'Run CMake with CMakeSettings.json'
#   inputs:
#      cmakeListsOrSettingsJson: 'CMakeSettingsJson'
#      # Use the vcpkg's toolchain file for CMake.
#      useVcpkgToolchainFile: true
#      # Build all configurations whose name starts with "Linux".
#      configurationRegexFilter: '*-*'
# - task: NodeTool@0
#   inputs:
#     versionSpec: '10.x'
#   displayName: 'Install emsdk'
# - script: |
#     cd ..
#     git init
#     git clone https://github.com/emscripten-core/emsdk.git
#     ./emsdk/emsdk install latest
#     ./emsdk/emsdk activate latest
#     ./emsdk/emsdk_env.ps1
#     npm install
#     npm run test
#   displayName: 'npm install and build'

# - task: CmdLine@2
#   inputs:
#     script: |
#       dir
#       git status
#       cd ..
#       git status
#   displayName: 'status'
# - script: 
#     echo Add other tasks to build, test, and deploy your project.
#     echo See https://aka.ms/yaml
#   displayName: 'Run a multi-line script'
